#! /usr/bin/env php
<?php
/**
 * @author Alexander Rein <a.rein@be-clever-ag.de>, beclever werbeagentur AG <support@be-clever-ag.de>
 * @copyright (c) 2016, Alexander Rein
 * @license http://www.gnu.org/licenses/agpl-3.0.html GNU Affero General Public License
 */
if (php_sapi_name() != 'cli' && substr(php_sapi_name(), 0, 3) !== 'cgi') {
	die('Not called from a command line interface (e.g. a shell or scheduler).');
}

// Get path to this script
$temp_PATH_thisScript = isset($_SERVER['argv'][0]) ? $_SERVER['argv'][0] : (isset($_ENV['_']) ? $_ENV['_'] : $_SERVER['_']);

// Figure out if the path is relative
$relativePath = FALSE;

if ($temp_PATH_thisScript{0} != '/') {
	$relativePath = TRUE;
}

// Resolve path
if ($relativePath) {
	$workingDirectory = isset($_SERVER['PWD']) ? $_SERVER['PWD'] : getcwd();
	if ($workingDirectory) {
		$temp_PATH_thisScript =
				$workingDirectory . '/' . preg_replace('/\.\//', '', $temp_PATH_thisScript);
		if (!@is_file($temp_PATH_thisScript)) {
			die('Relative path found, but an error occurred while resolving the absolute path: ' . $temp_PATH_thisScript);
		}
	} else {
		die('Relative path found, but resolving absolute path is not supported on this platform.');
	}
}

// Define absolute path to root folder
define('PATH_root', dirname(dirname(dirname($temp_PATH_thisScript))));


require_once(PATH_root.'/config/mainconf.php');
$PATH_classes = PATH_root . '/classes';
$PATH_l10n = PATH_root . '/l10n';
$GLOBALS["PATH_log"] = PATH_root.'/admin/logs';
require_once($PATH_l10n . '/locallang.php');
require_once($PATH_classes . '/class.User.php');
require_once($PATH_classes . '/class.Subscription.php');
require_once($PATH_classes . "/class.Helper.php");


$User = new User();
$usersUnconfirmed = $User->get_all_users(0);
$usersConfirmed = $User->get_all_users(1);
$now = new DateTime();

$LOCALall = array();
require_once($PATH_l10n . '/EN.php');
$LOCALdefault = $LOCAL;
$LOCALall['EN'] = $LOCALdefault;

foreach ($usersUnconfirmed as $userData) {
	$expireTime = $CONF["user"]["expire"] * 60 * 60;
	if (time() - strtotime($userData["create_time"]) > $expireTime) {
		if($User->cron_delete($userData["uID"], $userData["password"])){
			echo "User #{$userData["uID"]} successfully deleted.";
		}	
	}
}

foreach ($usersConfirmed as $userData) {
	if (is_string($userData["notification"])) {
		$notification = unserialize($userData["notification"]);
		$Subs = new Subscription($userData["uID"]);
		foreach ($CONF["notification"] as $notificationType => $notificationValue) {
			if (!empty($notification[$notificationType]) && $notification[$notificationType]) {
				if (!array_key_exists($userData["lang"], $LOCALall) && is_file($PATH_l10n . '/' . $userData["lang"] . '.php')) {
					require_once($PATH_l10n . '/' . $userData["lang"] . '.php');
					$LOCALall[$userData["lang"]] = $LOCALdefault;
					$LOCALall[$userData["lang"]] = $LOCAL;
				}
				$expireSubs = array();
				$allSubs = $Subs->get_subscription();
				foreach ($allSubs as $currentSub) {
					$expireDate = new DateTime($currentSub['exp_time']);
					$expireDate->modify('-'.$notificationValue);
					$notificationDate = new DateTime($currentSub['last_notification']);
					if ($expireDate->getTimestamp() <= $now->getTimestamp() && (empty($currentSub['last_notification']) || $expireDate->getTimestamp() > $notificationDate->getTimestamp())) {
						$expireSubs[$currentSub['sID']] = "#".$currentSub['sID']."\t(". date("Y/m/d", strtotime($currentSub['exp_time'])) .")\t".$currentSub['description'];
					}
				}
				if(!empty($expireSubs)){
					$User->map_user($userData["uID"]);
					$emailText = Helper::setMarker(array("firstname", "lastname", "EXPIRE"), array($userData["firstname"], $userData["lastname"], implode("\n", $expireSubs)), $LOCALall[$userData["lang"]]["email"]["notification"][$notificationType]);
					if ($User->send_mail($emailText, $LOCALall[$userData["lang"]]["email"]["notification"]["subject"], $CONF["email"])) {
						$Subs->set_notification(array_keys($expireSubs));
						echo "Notification ({$notificationType}) sent to User #{$userData["uID"]}";
					}
				}
			}
		}
	}
}
